$date
	Thu Jan 04 19:32:12 2024
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ns
$end

$scope module tb_pet_feeder $end
$var parameter 3 ! IDLE $end
$var parameter 3 " POUR_FOOD $end
$var parameter 3 # STOP_FOOD $end
$var parameter 3 $ INTERVAL $end
$var parameter 3 % RESET $end
$var reg 1 & clock $end
$var reg 1 ' reset $end
$var reg 3 ( keyboard_option [2:0] $end
$var reg 4 ) keyboard_digit [3:0] $end
$var reg 1 * option_enable $end
$var reg 1 + digit_enable $end
$var wire 1 , food_switch $end

$scope module pet_feeder_instance $end
$var parameter 3 - IDLE $end
$var parameter 3 . POUR_FOOD $end
$var parameter 3 / STOP_FOOD $end
$var parameter 3 0 INTERVAL $end
$var parameter 3 1 RESET $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 4 keyboard_option [2] $end
$var wire 1 5 keyboard_option [1] $end
$var wire 1 6 keyboard_option [0] $end
$var wire 1 7 option_enable $end
$var wire 1 8 keyboard_digit [3] $end
$var wire 1 9 keyboard_digit [2] $end
$var wire 1 : keyboard_digit [1] $end
$var wire 1 ; keyboard_digit [0] $end
$var wire 1 < digit_enable $end
$var wire 1 , food_switch $end
$var wire 1 = count_enable $end
$var wire 1 > count_reset $end
$var wire 1 ? interval_enable $end
$var wire 1 @ interval_reset $end
$var wire 1 A interval [15] $end
$var wire 1 B interval [14] $end
$var wire 1 C interval [13] $end
$var wire 1 D interval [12] $end
$var wire 1 E interval [11] $end
$var wire 1 F interval [10] $end
$var wire 1 G interval [9] $end
$var wire 1 H interval [8] $end
$var wire 1 I interval [7] $end
$var wire 1 J interval [6] $end
$var wire 1 K interval [5] $end
$var wire 1 L interval [4] $end
$var wire 1 M interval [3] $end
$var wire 1 N interval [2] $end
$var wire 1 O interval [1] $end
$var wire 1 P interval [0] $end
$var wire 1 Q new_clock_1Hz $end
$var wire 1 R switch_f_c $end
$var wire 1 S switch_i_c $end
$var wire 1 T count_out_f_c [3] $end
$var wire 1 U count_out_f_c [2] $end
$var wire 1 V count_out_f_c [1] $end
$var wire 1 W count_out_f_c [0] $end
$var wire 1 X count_out_i_c [20] $end
$var wire 1 Y count_out_i_c [19] $end
$var wire 1 Z count_out_i_c [18] $end
$var wire 1 [ count_out_i_c [17] $end
$var wire 1 \ count_out_i_c [16] $end
$var wire 1 ] count_out_i_c [15] $end
$var wire 1 ^ count_out_i_c [14] $end
$var wire 1 _ count_out_i_c [13] $end
$var wire 1 ` count_out_i_c [12] $end
$var wire 1 a count_out_i_c [11] $end
$var wire 1 b count_out_i_c [10] $end
$var wire 1 c count_out_i_c [9] $end
$var wire 1 d count_out_i_c [8] $end
$var wire 1 e count_out_i_c [7] $end
$var wire 1 f count_out_i_c [6] $end
$var wire 1 g count_out_i_c [5] $end
$var wire 1 h count_out_i_c [4] $end
$var wire 1 i count_out_i_c [3] $end
$var wire 1 j count_out_i_c [2] $end
$var wire 1 k count_out_i_c [1] $end
$var wire 1 l count_out_i_c [0] $end

$scope module alu $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 8 keyboard_digit [3] $end
$var wire 1 9 keyboard_digit [2] $end
$var wire 1 : keyboard_digit [1] $end
$var wire 1 ; keyboard_digit [0] $end
$var wire 1 < digit_enable $end
$var wire 1 A sum [15] $end
$var wire 1 B sum [14] $end
$var wire 1 C sum [13] $end
$var wire 1 D sum [12] $end
$var wire 1 E sum [11] $end
$var wire 1 F sum [10] $end
$var wire 1 G sum [9] $end
$var wire 1 H sum [8] $end
$var wire 1 I sum [7] $end
$var wire 1 J sum [6] $end
$var wire 1 K sum [5] $end
$var wire 1 L sum [4] $end
$var wire 1 M sum [3] $end
$var wire 1 N sum [2] $end
$var wire 1 O sum [1] $end
$var wire 1 P sum [0] $end
$var wire 1 m prev_sum [15] $end
$var wire 1 n prev_sum [14] $end
$var wire 1 o prev_sum [13] $end
$var wire 1 p prev_sum [12] $end
$var wire 1 q prev_sum [11] $end
$var wire 1 r prev_sum [10] $end
$var wire 1 s prev_sum [9] $end
$var wire 1 t prev_sum [8] $end
$var wire 1 u prev_sum [7] $end
$var wire 1 v prev_sum [6] $end
$var wire 1 w prev_sum [5] $end
$var wire 1 x prev_sum [4] $end
$var wire 1 y prev_sum [3] $end
$var wire 1 z prev_sum [2] $end
$var wire 1 { prev_sum [1] $end
$var wire 1 | prev_sum [0] $end
$var reg 16 } sum_reg [15:0] $end
$var reg 16 ~ sum_next [15:0] $end
$var reg 16 !! prev_sum_reg [15:0] $end
$var reg 16 "! prev_sum_next [15:0] $end
$upscope $end

$scope module option_fsm_inst $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 7 fsm_enable $end
$var wire 1 4 option [2] $end
$var wire 1 5 option [1] $end
$var wire 1 6 option [0] $end
$var wire 1 = count_enable $end
$var wire 1 > count_reset $end
$var wire 1 ? interval_enable $end
$var wire 1 @ interval_reset $end
$var reg 3 #! state_reg [2:0] $end
$var reg 3 $! state_next [2:0] $end
$var reg 1 %! count_enable_reg $end
$var reg 1 &! count_enable_next $end
$var reg 1 '! count_reset_reg $end
$var reg 1 (! count_reset_next $end
$var reg 1 )! interval_enable_reg $end
$var reg 1 *! interval_enable_next $end
$var reg 1 +! interval_reset_reg $end
$var reg 1 ,! interval_reset_next $end
$var reg 1 -! fsm_enable_reg $end
$var reg 1 .! fsm_enable_next $end
$upscope $end

$scope module food_counter_inst $end
$var parameter 32 /! food_time $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 = enable $end
$var wire 1 > count_reset $end
$var wire 1 R switch_f_c $end
$var wire 1 T count_out [3] $end
$var wire 1 U count_out [2] $end
$var wire 1 V count_out [1] $end
$var wire 1 W count_out [0] $end
$var reg 4 0! count_reg [3:0] $end
$var reg 4 1! count_next [3:0] $end
$var reg 1 2! switch_f_c_reg $end
$var reg 1 3! switch_f_c_next $end
$upscope $end

$scope module interval_counter_inst $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 ? enable $end
$var wire 1 @ interval_reset $end
$var wire 1 A interval [15] $end
$var wire 1 B interval [14] $end
$var wire 1 C interval [13] $end
$var wire 1 D interval [12] $end
$var wire 1 E interval [11] $end
$var wire 1 F interval [10] $end
$var wire 1 G interval [9] $end
$var wire 1 H interval [8] $end
$var wire 1 I interval [7] $end
$var wire 1 J interval [6] $end
$var wire 1 K interval [5] $end
$var wire 1 L interval [4] $end
$var wire 1 M interval [3] $end
$var wire 1 N interval [2] $end
$var wire 1 O interval [1] $end
$var wire 1 P interval [0] $end
$var wire 1 S switch_i_c $end
$var wire 1 X count_out [20] $end
$var wire 1 Y count_out [19] $end
$var wire 1 Z count_out [18] $end
$var wire 1 [ count_out [17] $end
$var wire 1 \ count_out [16] $end
$var wire 1 ] count_out [15] $end
$var wire 1 ^ count_out [14] $end
$var wire 1 _ count_out [13] $end
$var wire 1 ` count_out [12] $end
$var wire 1 a count_out [11] $end
$var wire 1 b count_out [10] $end
$var wire 1 c count_out [9] $end
$var wire 1 d count_out [8] $end
$var wire 1 e count_out [7] $end
$var wire 1 f count_out [6] $end
$var wire 1 g count_out [5] $end
$var wire 1 h count_out [4] $end
$var wire 1 i count_out [3] $end
$var wire 1 j count_out [2] $end
$var wire 1 k count_out [1] $end
$var wire 1 l count_out [0] $end
$var reg 21 4! count_reg [20:0] $end
$var reg 21 5! count_next [20:0] $end
$var reg 1 6! switch_i_c_reg $end
$var reg 1 7! switch_i_c_next $end
$var reg 21 8! interval_seconds_reg [20:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0&
1'
b0 (
b0 )
0*
0+
b0 }
b0 ~
b0 !!
bx "!
b100 #!
b0 $!
0%!
0&!
0'!
1(!
0)!
0*!
0+!
1,!
1-!
0.!
b0 0!
b0 1!
02!
03!
b0 4!
b0 5!
06!
07!
bx 8!
b0 !
b1 "
b10 #
b11 $
b100 %
b0 -
b1 .
b10 /
b11 0
b100 1
b1010 /!
0,
0=
0>
0?
0@
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
zQ
0R
0S
0W
0V
0U
0T
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0<
07
06
05
04
13
02
z;
z:
z9
z8
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
$end
#2
1&
12
b0 8!
#3
0'
03
#4
0&
02
#6
1&
12
bx !!
b0 #!
1'!
1+!
0-!
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
1>
1@
#8
0&
02
#10
1&
12
#12
0&
02
#13
b1 (
1*
16
17
1.!
b1 $!
#14
1&
12
b1 #!
1-!
1&!
0(!
0,!
b0 $!
#16
0&
02
#18
1&
12
b0 #!
1%!
0'!
0+!
1=
0>
0@
13!
b1 1!
b1 $!
#20
0&
02
#22
1&
12
b1 #!
b1 0!
12!
1W
1R
1,
b10 1!
b0 $!
#23
0*
07
b1 $!
0.!
b0 $!
#24
0&
02
#26
1&
12
b0 #!
0-!
b10 0!
0W
1V
b11 1!
#28
0&
02
#30
1&
12
b11 0!
1W
b100 1!
#32
0&
02
#34
1&
12
b100 0!
0W
0V
1U
b101 1!
#36
0&
02
#38
1&
12
b101 0!
1W
b110 1!
#40
0&
02
#42
1&
12
b110 0!
0W
1V
b111 1!
#44
0&
02
#46
1&
12
b111 0!
1W
b1000 1!
#48
0&
02
#50
1&
12
b1000 0!
0W
0V
0U
1T
b1001 1!
#52
0&
02
#54
1&
12
b1001 0!
1W
03!
b1010 1!
#56
0&
02
#58
1&
12
b1010 0!
02!
0W
1V
0R
0,
b0 1!
#60
0&
02
#62
1&
12
b0 0!
0V
0T
13!
b1 1!
#64
0&
02
#66
1&
12
b1 0!
12!
1W
1R
1,
b10 1!
#68
0&
02
#70
1&
12
b10 0!
0W
1V
b11 1!
#72
0&
02
#74
1&
12
b11 0!
1W
b100 1!
#76
0&
02
#78
1&
12
b100 0!
0W
0V
1U
b101 1!
#80
0&
02
#82
1&
12
b101 0!
1W
b110 1!
#84
0&
02
#86
1&
12
b110 0!
0W
1V
b111 1!
#88
0&
02
#90
1&
12
b111 0!
1W
b1000 1!
#92
0&
02
#94
1&
12
b1000 0!
0W
0V
0U
1T
b1001 1!
#96
0&
02
#98
1&
12
b1001 0!
1W
03!
b1010 1!
#100
0&
02
#102
1&
12
b1010 0!
02!
0W
1V
0R
0,
b0 1!
#104
0&
02
#106
1&
12
b0 0!
0V
0T
13!
b1 1!
#108
0&
02
#110
1&
12
b1 0!
12!
1W
1R
1,
b10 1!
#112
0&
02
#114
1&
12
b10 0!
0W
1V
b11 1!
#116
0&
02
#118
1&
12
b11 0!
1W
b100 1!
#120
0&
02
#122
1&
12
b100 0!
0W
0V
1U
b101 1!
#123
1*
17
1.!
b1 $!
#124
0&
02
#126
1&
12
b1 #!
1-!
b101 0!
1W
b110 1!
b0 $!
#128
0&
02
#130
1&
12
b0 #!
b110 0!
0W
1V
b111 1!
b1 $!
#131
0*
07
b0 $!
0.!
#132
0&
02
#134
1&
12
0-!
b111 0!
1W
b1000 1!
#136
0&
02
#138
1&
12
b1000 0!
0W
0V
0U
1T
b1001 1!
#140
0&
02
#141
b10 (
1*
06
15
17
0,
1.!
b10 $!
#142
1&
12
b10 #!
1-!
b1001 0!
1W
03!
b1010 1!
0&!
1(!
1,!
b0 $!
#144
0&
02
#146
1&
12
b0 #!
0%!
1'!
1+!
b1010 0!
02!
0W
1V
0R
0=
1>
1@
b10 $!
#148
0&
02
#150
1&
12
b10 #!
b0 0!
0V
0T
b0 1!
b0 $!
#151
0*
07
b10 $!
0.!
b0 $!
#152
0&
02
#154
1&
12
b0 #!
0-!
#156
0&
02
#158
1&
12
#160
0&
02
#162
1&
12
#164
0&
02
#166
1&
12
#168
0&
02
#170
1&
12
#172
0&
02
#174
1&
12
#176
0&
02
#178
1&
12
#180
0&
02
#182
1&
12
#184
0&
02
#186
1&
12
#188
0&
02
#190
1&
12
#192
0&
02
#194
1&
12
#196
0&
02
#198
1&
12
#200
0&
02
#202
1&
12
#204
0&
02
#206
1&
12
#208
0&
02
#210
1&
12
#212
0&
02
#214
1&
12
#216
0&
02
#218
1&
12
#220
0&
02
#222
1&
12
#224
0&
02
#226
1&
12
#228
0&
02
#230
1&
12
#232
0&
02
#234
1&
12
#236
0&
02
#238
1&
12
#240
0&
02
#242
1&
12
#244
0&
02
#246
1&
12
#248
0&
02
#250
1&
12
