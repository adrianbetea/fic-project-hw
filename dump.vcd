$date
	Wed Jan 03 17:33:17 2024
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ns
$end

$scope module tb_pet_feeder $end
$var parameter 3 ! IDLE $end
$var parameter 3 " POUR_FOOD $end
$var parameter 3 # STOP_FOOD $end
$var parameter 3 $ INTERVAL $end
$var parameter 3 % RESET $end
$var reg 1 & clock $end
$var reg 1 ' reset $end
$var reg 3 ( keyboard_option [2:0] $end
$var reg 4 ) keyboard_digit [3:0] $end
$var reg 1 * option_enable $end
$var reg 1 + digit_enable $end
$var wire 1 , food_switch $end

$scope module pet_feeder_instance $end
$var parameter 3 - IDLE $end
$var parameter 3 . POUR_FOOD $end
$var parameter 3 / STOP_FOOD $end
$var parameter 3 0 INTERVAL $end
$var parameter 3 1 RESET $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 4 keyboard_option [2] $end
$var wire 1 5 keyboard_option [1] $end
$var wire 1 6 keyboard_option [0] $end
$var wire 1 7 option_enable $end
$var wire 1 8 keyboard_digit [3] $end
$var wire 1 9 keyboard_digit [2] $end
$var wire 1 : keyboard_digit [1] $end
$var wire 1 ; keyboard_digit [0] $end
$var wire 1 < digit_enable $end
$var wire 1 , food_switch $end
$var wire 1 = count_enable $end
$var wire 1 > count_reset $end
$var wire 1 ? interval_enable $end
$var wire 1 @ interval [15] $end
$var wire 1 A interval [14] $end
$var wire 1 B interval [13] $end
$var wire 1 C interval [12] $end
$var wire 1 D interval [11] $end
$var wire 1 E interval [10] $end
$var wire 1 F interval [9] $end
$var wire 1 G interval [8] $end
$var wire 1 H interval [7] $end
$var wire 1 I interval [6] $end
$var wire 1 J interval [5] $end
$var wire 1 K interval [4] $end
$var wire 1 L interval [3] $end
$var wire 1 M interval [2] $end
$var wire 1 N interval [1] $end
$var wire 1 O interval [0] $end
$var wire 1 P new_clock_1Hz $end
$var wire 1 Q switch_f_c $end
$var wire 1 R switch_i_c $end
$var wire 1 S count_out_f_c [3] $end
$var wire 1 T count_out_f_c [2] $end
$var wire 1 U count_out_f_c [1] $end
$var wire 1 V count_out_f_c [0] $end
$var wire 1 W count_out_i_c [20] $end
$var wire 1 X count_out_i_c [19] $end
$var wire 1 Y count_out_i_c [18] $end
$var wire 1 Z count_out_i_c [17] $end
$var wire 1 [ count_out_i_c [16] $end
$var wire 1 \ count_out_i_c [15] $end
$var wire 1 ] count_out_i_c [14] $end
$var wire 1 ^ count_out_i_c [13] $end
$var wire 1 _ count_out_i_c [12] $end
$var wire 1 ` count_out_i_c [11] $end
$var wire 1 a count_out_i_c [10] $end
$var wire 1 b count_out_i_c [9] $end
$var wire 1 c count_out_i_c [8] $end
$var wire 1 d count_out_i_c [7] $end
$var wire 1 e count_out_i_c [6] $end
$var wire 1 f count_out_i_c [5] $end
$var wire 1 g count_out_i_c [4] $end
$var wire 1 h count_out_i_c [3] $end
$var wire 1 i count_out_i_c [2] $end
$var wire 1 j count_out_i_c [1] $end
$var wire 1 k count_out_i_c [0] $end
$var wire 1 l out_switch $end

$scope module divider50MHz_1Hz $end
$var parameter 32 m width $end
$var parameter 32 n MAX $end
$var parameter 32 o HALD_COUNT $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 P new_clock $end
$var reg 1 p count_reg [0:0] $end
$var reg 1 q count_next [0:0] $end
$var reg 1 r drive_reg $end
$var reg 1 s drive_next $end
$upscope $end

$scope module alu $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 8 keyboard_digit [3] $end
$var wire 1 9 keyboard_digit [2] $end
$var wire 1 : keyboard_digit [1] $end
$var wire 1 ; keyboard_digit [0] $end
$var wire 1 < digit_enable $end
$var wire 1 @ sum [15] $end
$var wire 1 A sum [14] $end
$var wire 1 B sum [13] $end
$var wire 1 C sum [12] $end
$var wire 1 D sum [11] $end
$var wire 1 E sum [10] $end
$var wire 1 F sum [9] $end
$var wire 1 G sum [8] $end
$var wire 1 H sum [7] $end
$var wire 1 I sum [6] $end
$var wire 1 J sum [5] $end
$var wire 1 K sum [4] $end
$var wire 1 L sum [3] $end
$var wire 1 M sum [2] $end
$var wire 1 N sum [1] $end
$var wire 1 O sum [0] $end
$var reg 16 t sum_reg [15:0] $end
$var reg 16 u sum_next [15:0] $end
$var reg 16 v prev_sum_reg [15:0] $end
$var reg 16 w prev_sum_next [15:0] $end
$upscope $end

$scope module option_fsm_inst $end
$var wire 1 2 clock $end
$var wire 1 3 reset $end
$var wire 1 7 fsm_enable $end
$var wire 1 4 option [2] $end
$var wire 1 5 option [1] $end
$var wire 1 6 option [0] $end
$var wire 1 = count_enable $end
$var wire 1 > count_reset $end
$var wire 1 ? interval_enable $end
$var reg 3 x state_reg [2:0] $end
$var reg 3 y state_next [2:0] $end
$var reg 1 z count_enable_reg $end
$var reg 1 { count_enable_next $end
$var reg 1 | count_reset_reg $end
$var reg 1 } count_reset_next $end
$var reg 1 ~ interval_enable_reg $end
$var reg 1 !! interval_enable_next $end
$var reg 1 "! fsm_enable_reg $end
$var reg 1 #! fsm_enable_next $end
$upscope $end

$scope module food_counter_inst $end
$var parameter 32 $! food_time $end
$var wire 1 P clock $end
$var wire 1 3 reset $end
$var wire 1 = enable $end
$var wire 1 > count_reset $end
$var wire 1 Q switch_f_c $end
$var wire 1 S count_out [3] $end
$var wire 1 T count_out [2] $end
$var wire 1 U count_out [1] $end
$var wire 1 V count_out [0] $end
$var reg 4 %! count_reg [3:0] $end
$var reg 4 &! count_next [3:0] $end
$var reg 1 '! switch_f_c_reg $end
$var reg 1 (! switch_f_c_next $end
$upscope $end

$scope module interval_counter_inst $end
$var wire 1 P clock $end
$var wire 1 3 reset $end
$var wire 1 ? enable $end
$var wire 1 @ interval [15] $end
$var wire 1 A interval [14] $end
$var wire 1 B interval [13] $end
$var wire 1 C interval [12] $end
$var wire 1 D interval [11] $end
$var wire 1 E interval [10] $end
$var wire 1 F interval [9] $end
$var wire 1 G interval [8] $end
$var wire 1 H interval [7] $end
$var wire 1 I interval [6] $end
$var wire 1 J interval [5] $end
$var wire 1 K interval [4] $end
$var wire 1 L interval [3] $end
$var wire 1 M interval [2] $end
$var wire 1 N interval [1] $end
$var wire 1 O interval [0] $end
$var wire 1 R switch_i_c $end
$var wire 1 W count_out [20] $end
$var wire 1 X count_out [19] $end
$var wire 1 Y count_out [18] $end
$var wire 1 Z count_out [17] $end
$var wire 1 [ count_out [16] $end
$var wire 1 \ count_out [15] $end
$var wire 1 ] count_out [14] $end
$var wire 1 ^ count_out [13] $end
$var wire 1 _ count_out [12] $end
$var wire 1 ` count_out [11] $end
$var wire 1 a count_out [10] $end
$var wire 1 b count_out [9] $end
$var wire 1 c count_out [8] $end
$var wire 1 d count_out [7] $end
$var wire 1 e count_out [6] $end
$var wire 1 f count_out [5] $end
$var wire 1 g count_out [4] $end
$var wire 1 h count_out [3] $end
$var wire 1 i count_out [2] $end
$var wire 1 j count_out [1] $end
$var wire 1 k count_out [0] $end
$var reg 21 )! count_reg [20:0] $end
$var reg 21 *! count_next [20:0] $end
$var reg 1 +! switch_i_c_reg $end
$var reg 1 ,! switch_i_c_next $end
$var reg 21 -! interval_seconds_reg [20:0] $end
$upscope $end

$scope module mux2to1_instance $end
$var parameter 3 .! POUR_FOOD $end
$var parameter 3 /! INTERVAL $end
$var wire 1 Q in1 $end
$var wire 1 R in2 $end
$var wire 1 9 sel [2] $end
$var wire 1 : sel [1] $end
$var wire 1 ; sel [0] $end
$var wire 1 l out $end
$var reg 1 0! out_reg $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0&
1'
bx (
bx )
x*
x+
b0 p
b0 q
0r
0s
b0 t
bx u
b0 v
b0 w
b100 x
b0 y
0z
0{
0|
0}
0~
0!!
1"!
x#!
b0 %!
b0 &!
0'!
x(!
b0 )!
b0 *!
0+!
x,!
bx -!
x0!
b0 !
b1 "
b10 #
b11 $
b100 %
b0 -
b1 .
b10 /
b11 0
b100 1
b1 m
b1 n
b0 o
b1010 $!
b1 .!
b11 /!
x,
0=
0>
0?
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0P
0Q
0R
0V
0U
0T
0S
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
xl
x<
x7
x6
x5
x4
13
02
z;
z:
z9
z8
$end
#2
1&
12
#3
0'
b1 (
03
16
05
04
b100 y
b0 y
#4
0&
02
#6
1&
12
bx t
b0 x
x"!
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
#8
0&
02
#10
1&
12
#12
0&
02
#13
1*
17
1#!
#14
1&
12
1"!
#16
0&
02
#18
1&
12
#20
0&
02
#22
1&
12
#23
0*
07
0#!
b1 y
#24
0&
02
#26
1&
12
b1 x
0"!
1{
b0 y
#28
0&
02
#30
1&
12
b0 x
1z
1=
1(!
b1 &!
#32
0&
02
#33
b0 (
06
#34
1&
12
#36
0&
02
#38
1&
12
#40
0&
02
#42
1&
12
#44
0&
02
#46
1&
12
#48
0&
02
#50
1&
12
#52
0&
02
#54
1&
12
#56
0&
02
#58
1&
12
#60
0&
02
#62
1&
12
#64
0&
02
#66
1&
12
#68
0&
02
#70
1&
12
#72
0&
02
#74
1&
12
#76
0&
02
#78
1&
12
#80
0&
02
#82
1&
12
#84
0&
02
#86
1&
12
#88
0&
02
#90
1&
12
#92
0&
02
#94
1&
12
#96
0&
02
#98
1&
12
#100
0&
02
#102
1&
12
#104
0&
02
#106
1&
12
#108
0&
02
#110
1&
12
#112
0&
02
#114
1&
12
#116
0&
02
#118
1&
12
#120
0&
02
#122
1&
12
#124
0&
02
#126
1&
12
#128
0&
02
#130
1&
12
#132
0&
02
#134
1&
12
#136
0&
02
#138
1&
12
#140
0&
02
#142
1&
12
#144
0&
02
#146
1&
12
#148
0&
02
#150
1&
12
#152
0&
02
#154
1&
12
#156
0&
02
#158
1&
12
#160
0&
02
#162
1&
12
#164
0&
02
#166
1&
12
#168
0&
02
#170
1&
12
#172
0&
02
#174
1&
12
#176
0&
02
#178
1&
12
#180
0&
02
#182
1&
12
#184
0&
02
#186
1&
12
#188
0&
02
#190
1&
12
#192
0&
02
#194
1&
12
#196
0&
02
#198
1&
12
#200
0&
02
#202
1&
12
#204
0&
02
#206
1&
12
#208
0&
02
#210
1&
12
#212
0&
02
#214
1&
12
#216
0&
02
#218
1&
12
#220
0&
02
#222
1&
12
#224
0&
02
#226
1&
12
#228
0&
02
#230
1&
12
#232
0&
02
